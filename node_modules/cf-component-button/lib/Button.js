'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var PropTypes = React.PropTypes;

var Button = function (_React$Component) {
  _inherits(Button, _React$Component);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Button.prototype.render = function render() {
    var _props = this.props;
    var disabled = _props.disabled;
    var loading = _props.loading;

    var type = this.props.submit ? 'submit' : 'button';
    var className = 'cf-btn cf-btn--' + this.props.type;

    if (loading) {
      className += ' cf-btn--loading';
    }

    // Unless the disabled state is explicitly set, the button is disabled when loading.
    var isDisabled = (disabled !== undefined ? disabled : loading) || false;

    return React.createElement(
      'button',
      {
        type: type,
        className: className,
        disabled: isDisabled,
        onClick: this.props.onClick },
      this.props.children
    );
  };

  return Button;
}(React.Component);

Button.propTypes = {
  onClick: PropTypes.func.isRequired,
  submit: PropTypes.bool,
  type: PropTypes.oneOf(['default', 'primary', 'success', 'warning', 'danger']).isRequired,
  disabled: PropTypes.bool,
  loading: PropTypes.bool
};
Button.defaultProps = {
  type: 'default',
  submit: false
};
;

module.exports = Button;