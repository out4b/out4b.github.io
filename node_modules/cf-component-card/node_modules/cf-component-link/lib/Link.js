'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var PropTypes = React.PropTypes;

var _require = require('cf-util-route-handler');

var routeTo = _require.routeTo;

var Link = function (_React$Component) {
  _inherits(Link, _React$Component);

  function Link(props, context) {
    _classCallCheck(this, Link);

    if (!props.to && !props.onClick) {
      throw new Error('<Link/> requires either a `to` or `onClick` prop');
    }

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

    _this.handleClick = function (e) {
      e.preventDefault();

      if (_this.props.disabled) {
        return;
      }

      if (_this.props.to) {
        routeTo(_this.props.to);
      } else {
        _this.props.onClick(e);
      }
    };

    return _this;
  }

  Link.prototype.render = function render() {
    var _props = this.props;
    var tagName = _props.tagName;
    var to = _props.to;
    var children = _props.children;
    var className = _props.className;
    var disabled = _props.disabled;

    var props = _objectWithoutProperties(_props, ['tagName', 'to', 'children', 'className', 'disabled']);

    if (!props.href && tagName === 'a') {
      props.href = to || '#!';
    }

    if (!props.role) {
      if (to && tagName !== 'a') {
        props.role = 'link';
      } else if (!to) {
        props.role = 'button';
      }
    }

    props.className = 'cf-link';

    if (disabled) {
      props.className += ' cf-link--disabled';
      props.disabled = true;
    }

    if (className) {
      props.className += ' ' + className;
    }

    props.onClick = this.handleClick;

    return React.createElement(tagName, props, children);
  };

  return Link;
}(React.Component);

Link.propTypes = {
  to: PropTypes.string,
  onClick: PropTypes.func,
  tagName: PropTypes.string,
  disabled: PropTypes.bool
};
Link.defaultProps = {
  tagName: 'a'
};


module.exports = Link;