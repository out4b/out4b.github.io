'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var Link = require('cf-component-link');
var PropTypes = React.PropTypes;

var CardToolbarLink = function (_React$Component) {
  _inherits(CardToolbarLink, _React$Component);

  function CardToolbarLink() {
    var _temp, _this, _ret;

    _classCallCheck(this, CardToolbarLink);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (e) {
      e.preventDefault();
      _this.props.onClick();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  CardToolbarLink.prototype.render = function render() {
    var className = 'cf-card__toolbar_link';

    if (this.props.isActive) {
      className += ' cf-card__toolbar_link--open';
    }

    return React.createElement(
      Link,
      { role: 'tab', id: this.props.id, className: className, onClick: this.handleClick },
      this.props.children
    );
  };

  return CardToolbarLink;
}(React.Component);

CardToolbarLink.propTypes = {
  onClick: PropTypes.func.isRequired,
  isActive: PropTypes.bool.isRequired,
  id: PropTypes.string
};


module.exports = CardToolbarLink;