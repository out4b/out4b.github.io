"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var PropTypes = React.PropTypes;

var CardToolbar = function (_React$Component) {
  _inherits(CardToolbar, _React$Component);

  function CardToolbar() {
    _classCallCheck(this, CardToolbar);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  CardToolbar.prototype.render = function render() {
    return React.createElement(
      "div",
      { className: "cf-card__toolbar" },
      React.createElement(
        "div",
        { className: "cf-card__toolbar_controls" },
        this.props.controls
      ),
      React.createElement(
        "div",
        { className: "cf-card__toolbar_links", role: "tablist" },
        this.props.links
      )
    );
  };

  return CardToolbar;
}(React.Component);

CardToolbar.propTypes = {
  controls: PropTypes.any,
  links: PropTypes.any
};


module.exports = CardToolbar;