'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var PropTypes = React.PropTypes;

var CardSection = require('./CardSection');
var CardToolbar = require('./CardToolbar');
var CardToolbarLink = require('./CardToolbarLink');
var CardPropTypes = require('./CardPropTypes');

var UNIQUE_ID = 0;

var CardDrawers = function (_React$Component) {
  _inherits(CardDrawers, _React$Component);

  function CardDrawers() {
    var _temp, _this, _ret;

    _classCallCheck(this, CardDrawers);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this._cardId = UNIQUE_ID++, _temp), _possibleConstructorReturn(_this, _ret);
  }

  CardDrawers.prototype.render = function render() {
    var _this2 = this;

    var links = [];
    var drawers = [];

    this.props.drawers.forEach(function (drawer) {
      var isActive = drawer.id === _this2.props.active;
      var id = 'card-' + _this2._cardId + '-drawer-' + drawer.id;

      links.push(React.createElement(
        CardToolbarLink,
        {
          key: drawer.id,
          id: id,
          isActive: isActive,
          onClick: _this2.props.onClick.bind(null, drawer.id) },
        drawer.name
      ));

      var className = 'cf-card__drawer';

      if (isActive) {
        className += ' cf-card__drawer--active';
      }

      drawers.push(React.createElement(
        'div',
        {
          key: drawer.id,
          role: 'tabpanel',
          'aria-labelledby': id,
          'aria-hidden': isActive ? 'false' : 'true',
          className: className },
        isActive && drawer.content
      ));
    });

    var containerClassName = 'cf-card__drawers_container';

    if (this.props.active) {
      containerClassName += ' cf-card__drawers_container--open';
    }

    return React.createElement(
      CardSection,
      null,
      React.createElement(CardToolbar, { controls: this.props.controls, links: links }),
      React.createElement(
        'div',
        { className: containerClassName },
        drawers
      )
    );
  };

  return CardDrawers;
}(React.Component);

CardDrawers.propTypes = {
  onClick: PropTypes.func.isRequired,

  active: PropTypes.string,
  drawers: CardPropTypes.cardDrawers.isRequired,

  // for an optional control to put on the left side of the toolbar
  controls: PropTypes.any
};


module.exports = CardDrawers;